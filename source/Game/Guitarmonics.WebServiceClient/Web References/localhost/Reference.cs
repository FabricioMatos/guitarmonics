//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.
// 
#pragma warning disable 1591

namespace Guitarmonics.WebServiceClient.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GameServiceSoap", Namespace="http://guitarmonics.com/")]
    public partial class GameService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ListAllSongVersionsSortedByArtistNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSongVersionTablatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSongVersionSynchronizationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GameService() {
            this.Url = "http://localhost:50000/GameService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ListAllSongVersionsSortedByArtistNameCompletedEventHandler ListAllSongVersionsSortedByArtistNameCompleted;
        
        /// <remarks/>
        public event GetSongVersionTablatureCompletedEventHandler GetSongVersionTablatureCompleted;
        
        /// <remarks/>
        public event GetSongVersionSynchronizationCompletedEventHandler GetSongVersionSynchronizationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://guitarmonics.com/ListAllSongVersionsSortedByArtistName", RequestNamespace="http://guitarmonics.com/", ResponseNamespace="http://guitarmonics.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result", IsNullable=true)]
        public SongVersionInformationList ListAllSongVersionsSortedByArtistName(string pUserName, string pPasswordHash) {
            object[] results = this.Invoke("ListAllSongVersionsSortedByArtistName", new object[] {
                        pUserName,
                        pPasswordHash});
            return ((SongVersionInformationList)(results[0]));
        }
        
        /// <remarks/>
        public void ListAllSongVersionsSortedByArtistNameAsync(string pUserName, string pPasswordHash) {
            this.ListAllSongVersionsSortedByArtistNameAsync(pUserName, pPasswordHash, null);
        }
        
        /// <remarks/>
        public void ListAllSongVersionsSortedByArtistNameAsync(string pUserName, string pPasswordHash, object userState) {
            if ((this.ListAllSongVersionsSortedByArtistNameOperationCompleted == null)) {
                this.ListAllSongVersionsSortedByArtistNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListAllSongVersionsSortedByArtistNameOperationCompleted);
            }
            this.InvokeAsync("ListAllSongVersionsSortedByArtistName", new object[] {
                        pUserName,
                        pPasswordHash}, this.ListAllSongVersionsSortedByArtistNameOperationCompleted, userState);
        }
        
        private void OnListAllSongVersionsSortedByArtistNameOperationCompleted(object arg) {
            if ((this.ListAllSongVersionsSortedByArtistNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListAllSongVersionsSortedByArtistNameCompleted(this, new ListAllSongVersionsSortedByArtistNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://guitarmonics.com/GetSongVersionTablature", RequestNamespace="http://guitarmonics.com/", ResponseNamespace="http://guitarmonics.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSongVersionTablature(string pUserName, string pPasswordHash, System.Guid pOid) {
            object[] results = this.Invoke("GetSongVersionTablature", new object[] {
                        pUserName,
                        pPasswordHash,
                        pOid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSongVersionTablatureAsync(string pUserName, string pPasswordHash, System.Guid pOid) {
            this.GetSongVersionTablatureAsync(pUserName, pPasswordHash, pOid, null);
        }
        
        /// <remarks/>
        public void GetSongVersionTablatureAsync(string pUserName, string pPasswordHash, System.Guid pOid, object userState) {
            if ((this.GetSongVersionTablatureOperationCompleted == null)) {
                this.GetSongVersionTablatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSongVersionTablatureOperationCompleted);
            }
            this.InvokeAsync("GetSongVersionTablature", new object[] {
                        pUserName,
                        pPasswordHash,
                        pOid}, this.GetSongVersionTablatureOperationCompleted, userState);
        }
        
        private void OnGetSongVersionTablatureOperationCompleted(object arg) {
            if ((this.GetSongVersionTablatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSongVersionTablatureCompleted(this, new GetSongVersionTablatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://guitarmonics.com/GetSongVersionSynchronization", RequestNamespace="http://guitarmonics.com/", ResponseNamespace="http://guitarmonics.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSongVersionSynchronization(string pUserName, string pPasswordHash, System.Guid pOid) {
            object[] results = this.Invoke("GetSongVersionSynchronization", new object[] {
                        pUserName,
                        pPasswordHash,
                        pOid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSongVersionSynchronizationAsync(string pUserName, string pPasswordHash, System.Guid pOid) {
            this.GetSongVersionSynchronizationAsync(pUserName, pPasswordHash, pOid, null);
        }
        
        /// <remarks/>
        public void GetSongVersionSynchronizationAsync(string pUserName, string pPasswordHash, System.Guid pOid, object userState) {
            if ((this.GetSongVersionSynchronizationOperationCompleted == null)) {
                this.GetSongVersionSynchronizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSongVersionSynchronizationOperationCompleted);
            }
            this.InvokeAsync("GetSongVersionSynchronization", new object[] {
                        pUserName,
                        pPasswordHash,
                        pOid}, this.GetSongVersionSynchronizationOperationCompleted, userState);
        }
        
        private void OnGetSongVersionSynchronizationOperationCompleted(object arg) {
            if ((this.GetSongVersionSynchronizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSongVersionSynchronizationCompleted(this, new GetSongVersionSynchronizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://guitarmonics.com/")]
    public partial class SongVersionInformationList {
        
        private SongVersionInformation[] songVersionInformationList1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute("SongVersionInformationList")]
        public SongVersionInformation[] SongVersionInformationList1 {
            get {
                return this.songVersionInformationList1Field;
            }
            set {
                this.songVersionInformationList1Field = value;
            }
        }

        public SongVersionInformation[] Items
        {
            get
            {
                return this.songVersionInformationList1Field;
            }
            set
            {
                this.songVersionInformationList1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://guitarmonics.com/")]
    public partial class SongVersionInformation {
        
        private string idField;
        
        private string artistField;
        
        private string albumField;
        
        private string songField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
            }
        }
        
        /// <remarks/>
        public string Album {
            get {
                return this.albumField;
            }
            set {
                this.albumField = value;
            }
        }
        
        /// <remarks/>
        public string Song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListAllSongVersionsSortedByArtistNameCompletedEventHandler(object sender, ListAllSongVersionsSortedByArtistNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListAllSongVersionsSortedByArtistNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListAllSongVersionsSortedByArtistNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SongVersionInformationList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SongVersionInformationList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSongVersionTablatureCompletedEventHandler(object sender, GetSongVersionTablatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSongVersionTablatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSongVersionTablatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSongVersionSynchronizationCompletedEventHandler(object sender, GetSongVersionSynchronizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSongVersionSynchronizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSongVersionSynchronizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591